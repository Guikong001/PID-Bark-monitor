#!/bin/bash

# 初始化变量
pids=""
title="默认推送标题"
interval=300
watch_interval=60
version="Alpha-0.1.4"
key="默认密钥"
server="api.day.app"
test_mode=false

# 用法说明
usage() {
  echo -e " "
  echo -e "\e[31m"
  echo "  ____  _             __  __             _ _              "
  echo " / ___|| | ___  _ __ |  \/  | ___  _ __ (_) |_ ___  _ __  "
  echo " \___ \| |/ _ \| '_ \| |\/| |/ _ \| '_ \| | __/ _ \| '__| "
  echo "  ___) | | (_) | | | | |  | | (_) | | | | | || (_) | |    "
  echo " |____/|_|\___/|_| |_|_|  |_|\___/|_| |_|_|\__\___/|_|    "
  echo -e "\e[0m"
  echo -e " "
  echo -e "用法: slonmonitor [选项] + "
  echo -e "Usage: slonmonitor options +"
  echo -e " "
  echo -e "选项:"
  echo -e "Options:"
  echo -e " "
  echo -e "  -p PID列表     添加pid编号，可以添加多个，使用;隔开，如添加多个PID，请把所有PID使用英文单引号包裹"
  echo -e "  -t 标题        更换推送标题"
  echo -e "  -s 服务器      更换为自己搭建的Bark推动服务器"
  echo -e "  -c 监控间隔    监控间隔（单位：秒）,默认为60秒，每60秒查看是否有被监控进程结束"
  echo -e "  -w 进程间隔    当前正在运行进程的监控间隔（单位：秒），默认为300秒，每300秒报告正在正常运行的被监 \n                 控进程数量"
  echo -e "  -m 密钥        设置推送服务的密钥，第一次传入秘钥后可以选择保存到本地，后续将自动读取；如需修改， \n                 传入新秘钥会自动覆盖原有秘钥"
  echo -e "  --test         进入测试模式，发送测试推送"
  echo -e "  -h, --help     显示此帮助信息并退出"
  echo -e "  -v, --version  显示版本信息并退出"
  echo -e " "
  echo -e "    本应用仅支持iOS系统推送，手机端请下载Bark APP，下载后将服务器地址后面的密钥复制保存，作为 -m 参数的密钥传递给本应用，即可监控进程。"
  echo -e " "
  echo -e "    在正式使用前，可以使用 --test 参数测试是否已经可以使用。按照上述操作设置好手机app后，你可以使用这 \n条命令来测试推送是否正常： slonmonitor --test -m your-key-here -t Test-Message 。将这里的your-key-here \n换成你的密钥即可。"
  echo -e " "
}



# 保存密钥的文件路径
key_file="$HOME/slonmonitor_key"

# 解析命令行参数
while getopts ":p:t:s:c:w:m:-:hv" opt; do
  case $opt in
    p) pids=$(echo "$OPTARG" | tr ';' ' ') ;;
    t) title="$OPTARG" ;;
    s) server="$OPTARG" ;;
    c) interval="$OPTARG" ;;
    w) watch_interval="$OPTARG" ;;
    m)
      key="$OPTARG"
      echo "是否要将密钥保存？(y/yes)如果选择保存，下次则不需要再次传入秘钥，如果需要修改秘钥，直接重新传入秘钥，会自动覆盖原有保存的秘钥: "
      read save_key
      if [[ "$save_key" == "y" || "$save_key" == "yes" ]]; then
        echo "$key" > "$key_file"
        echo "密钥已保存到 $key_file"
      fi
      ;;
    h) usage; exit 0 ;;
    v) echo -e "\033[34mslonmonitor Version版本 $version\033[0m"; exit 0 ;;
    -)
      case "${OPTARG}" in
        help) usage; exit 0 ;;
        version) echo -e "\033[34mslonmonitor Version版本 $version\033[0m"; exit 0 ;;
        test) test_mode=true ;;
        *) echo "非法选项 --$OPTARG"; usage; exit 1 ;;
      esac
      ;;
    \?) echo "非法选项 -$opt"; usage; exit 1 ;;
  esac
done

# 如果没有传入密钥，尝试从文件中读取
if [[ -z "$key" || "$key" == "默认密钥" ]]; then
  if [[ -f "$key_file" ]]; then
    key=$(cat "$key_file")
    echo "从文件中读取密钥: $key"
  else
    echo "没有传入密钥，也没有找到保存的密钥文件"
    exit 1
  fi
fi
# 测试模式
if [ "$test_mode" = true ]; then
  curl "https://$server/$key/$title/PID为这是一条测试信息，如果你的手机推送了，则测试成功?isArchive=1&group=Personal"
  echo "测试推送已发送"
  exit 0
fi

# 后台监控任务
monitor_processes() {
    # 初始进程数量
    total=$(echo $pids | wc -w)
    # 初始化时间计数器
    time_passed=0

    # 检测进程是否还在运行
    while [ -n "$pids" ]; do
        remaining=$total
        new_pids=""
        for pid in $pids; do
            if ps -p $pid > /dev/null 2>&1; then
                new_pids="$new_pids $pid"
            else
                ((remaining--))
                curl "https://$server/$key/$title/PID为${pid}的进程已结束，剩余${remaining}个?isArchive=1&group=Personal"
                echo "$(date '+%Y-%m-%d %H:%M:%S') - PID ${pid} 已结束, 剩余 ${remaining} 个进程."
            fi
        done
        pids=$(echo $new_pids | xargs)
        total=$(echo $pids | wc -w) # 更新total为剩余进程数量
        echo "$(date '+%Y-%m-%d %H:%M:%S') - 当前正在监控的进程: $pids"
        if [ "$remaining" -eq 0 ]; then
            break
        fi
        sleep $watch_interval
        ((time_passed+=watch_interval))
        if [ $time_passed -ge $interval ]; then
            curl "https://$server/$key/$title/当前正在进行的进程数量：${remaining}个?isArchive=1&group=Personal"
            time_passed=0
        fi
    done

    echo "所有监控的进程均已结束。" && curl "https://$server/$key/$title/所有任务都已结束?isArchive=1&group=Personal"
}

# 启动监控任务并转向后台运行
echo "开始后台监控"
monitor_processes > /dev/null 2>&1 &



